import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GameBoard extends JPanel {
    private JButton[][] buttons;
    private boolean xTurn;

    public GameBoard() {
        setLayout(new GridLayout(3, 3));
        buttons = new JButton[3][3];
        xTurn = true;

        // Initialize buttons
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col] = new JButton("");
                buttons[row][col].setFont(new Font("Arial", Font.PLAIN, 60));
                buttons[row][col].setFocusPainted(false);
                buttons[row][col].addActionListener(new ButtonClickListener(row, col));
                add(buttons[row][col]);
            }
        }
    }

    private class ButtonClickListener implements ActionListener {
        private int row;
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!buttons[row][col].getText().equals("")) {
                return;
            }

            buttons[row][col].setText(xTurn ? "X" : "O");
            xTurn = !xTurn;

            if (checkForWin()) {
                JOptionPane.showMessageDialog(null, (xTurn ? "O" : "X") + " wins!");
                resetBoard();
            } else if (isBoardFull()) {
                JOptionPane.showMessageDialog(null, "It's a draw!");
                resetBoard();
            }
        }

        private boolean checkForWin() {
            // Check rows, columns, and diagonals for a win
            for (int i = 0; i < 3; i++) {
                if (buttons[i][0].getText().equals(buttons[i][1].getText()) && 
                    buttons[i][1].getText().equals(buttons[i][2].getText()) && 
                    !buttons[i][0].getText().equals("")) {
                    return true;
                }

                if (buttons[0][i].getText().equals(buttons[1][i].getText()) && 
                    buttons[1][i].getText().equals(buttons[2][i].getText()) && 
                    !buttons[0][i].getText().equals("")) {
                    return true;
                }
            }

            if (buttons[0][0].getText().equals(buttons[1][1].getText()) && 
                buttons[1][1].getText().equals(buttons[2][2].getText()) && 
                !buttons[0][0].getText().equals("")) {
                return true;
            }

            if (buttons[0][2].getText().equals(buttons[1][1].getText()) && 
                buttons[1][1].getText().equals(buttons[2][0].getText()) && 
                !buttons[0][2].getText().equals("")) {
                return true;
            }

            return false;
        }

        private boolean isBoardFull() {
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    if (buttons[row][col].getText().equals("")) {
                        return false;
                    }
                }
            }
            return true;
        }

        private void resetBoard() {
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    buttons[row][col].setText("");
                }
            }
            xTurn = true;
        }
    }
}
